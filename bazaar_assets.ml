(* Generated by: ocaml-crunch
   Creation date: Fri, 2 Feb 2024 09:07:02 GMT *)

module Internal = struct
  let d_b03472547a59c0b0da4057849314e5ac = "(() => {\n  // output/bazaar_js/ffi.mjs\n  function init(url) {\n    return {\n      ws: {\n        contents: 0\n      },\n      url\n    };\n  }\n  function connect(t) {\n    t.ws.contents = new WebSocket(t.url);\n  }\n  function send(t, data) {\n    t.ws.contents.send(data);\n  }\n  var $$WebSocket$2 = {\n    init,\n    connect,\n    send\n  };\n  var LongPolling = {};\n  var Trail = {\n    $$WebSocket: $$WebSocket$2,\n    LongPolling\n  };\n  function endpoint(path) {\n    var $$location = window.location;\n    var protocol = $$location.protocol;\n    var protocol$1 = protocol.replace(\"http\", \"ws\");\n    var host = $$location.host;\n    return protocol$1 + (\"//\" + (host + path));\n  }\n  function make(url, S) {\n    var url$1 = endpoint(url);\n    return (\n      /* LS */\n      {\n        sock: S,\n        state: S.init(url$1),\n        url: url$1\n      }\n    );\n  }\n  function connect$1(param) {\n    var state = param.state;\n    var S = param.sock;\n    var readyState = document.readyState;\n    var do_connect = function(param2) {\n      S.connect(state);\n    };\n    if ([\n      \"complete\",\n      \"loaded\",\n      \"interactive\"\n    ].indexOf(readyState) >= 0) {\n      return S.connect(state);\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", do_connect);\n      return;\n    }\n  }\n  function send$1(param, data) {\n    param.sock.send(param.state, data);\n  }\n  var LiveSocket = {\n    endpoint,\n    make,\n    connect: connect$1,\n    send: send$1\n  };\n  function bind(socket, root) {\n    var elements = root.querySelectorAll(\"[data-sw-event]\");\n    elements.forEach(function(el) {\n      var id = el.getAttribute(\"data-sw-el-id\");\n      var $$event = el.getAttribute(\"data-sw-event\");\n      var data = function(id2) {\n        return JSON.stringify({ \"Event\": [id2, \"\"] });\n      };\n      var data$1 = data(id);\n      el.addEventListener($$event, function(_ev) {\n        send$1(socket, data$1);\n      });\n    });\n  }\n  function setup(socket) {\n    var root = document.querySelector(\"[sw-root]\");\n    var observer = new MutationObserver(function(mut_list, _obs) {\n      console.log(mut_list);\n    });\n    observer.observe(root, {\n      attributes: true,\n      childList: true,\n      subtree: true\n    });\n    bind(socket, root);\n  }\n  var Sidewinder = {\n    LiveSocket,\n    bind,\n    setup\n  };\n\n  // output/bazaar_js/main.mjs\n  function main(param) {\n    var socket = Sidewinder.LiveSocket.make(\"/live\", Trail.$$WebSocket);\n    Sidewinder.LiveSocket.connect(socket);\n    Sidewinder.setup(socket);\n  }\n  main(void 0);\n})();\n"

  let file_chunks = function
    | "main.js" | "/main.js" -> Some [ d_b03472547a59c0b0da4057849314e5ac; ]
    | _ -> None

  let file_list = [ "main.js"; ]
end

let file_list = Internal.file_list

let read name =
  match Internal.file_chunks name with
  | None -> None
  | Some c -> Some (String.concat "" c)

let hash = function
  | "main.js" | "/main.js" -> Some "b03472547a59c0b0da4057849314e5ac"
  | _ -> None

let size = function
  | "main.js" | "/main.js" -> Some 2507
  | _ -> None
